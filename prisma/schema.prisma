generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Link {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  href      String
  icon      String?
  category  String
}

model Announcement {
  id          Int                      @id @default(autoincrement())
  createdAt   DateTime                 @default(now())
  title       String
  content     String?
  date        DateTime
  readByUsers AnnouncementReadStatus[]
}

model Department {
  id    String @id @default(cuid())
  code  Int    @unique
  name  String
  users User[]

  @@map("departments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String                   @id @default(cuid())
  name              String?
  email             String?                  @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  readAnnouncements AnnouncementReadStatus[]

  // --- CUSTOM FIELDS FOR DSP INTRANET ---
  password          String?
  role              String                   @default("standard")
  ticketNo          String                   @unique
  designation       String?
  contactNo         String?
  sailPNo           String?
  department        Department?              @relation(fields: [departmentId], references: [id])
  departmentId      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AnnouncementReadStatus {
  id             String       @id @default(cuid())
  userId         String
  announcementId Int
  readAt         DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
}

// --- NEW MODEL FOR CIRCULARS ---
model Circular {
  id          Int      @id @default(autoincrement())
  headline    String
  fileUrl     String?
  publishedAt DateTime @default(now())

  @@map("circulars")
}